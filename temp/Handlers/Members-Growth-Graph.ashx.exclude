<%@ WebHandler Language="C#" Class="Members_Growth_Graph" %>
using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;
using System.IO;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public class Members_Growth_Graph : IHttpHandler {
    public HttpContext context; public HttpRequest request; public HttpResponse response;
    public bool sc;
    public static string msg, dtl, strJson, UserID = "";
    DynamicDtls objgdb = new DynamicDtls(); DataSet ds; DataTable dt;
    public void ProcessRequest(HttpContext _context)
    {
        context = _context;
        request = _context.Request;
        response = _context.Response;
        context.Response.ContentType = "application/json";
        //////
        if (context.Request.Cookies["Tap190Nvw92mst"] != null)
        {
            ////////
            UserID = DB.base64Decod(context.Request.Cookies["Tap190Nvw92mst"].Value).ToString();
            /////////
            //ddlJumpToPage.Items.Clear();
            int TotalRows = this.BindResult();
            //this.populateList(TotalRows);
        }
        else
        {
            context.Response.Write("<script>window.open('login.html','_top');</script>");
        }
        /////////
        //handleRequest();
    }
    private int BindResult()
    {
        int TotalRows = 0;
        try
        {
            ds = objgdb.ByProcedure("dbo.GetMemGrowth_Bonus_GRAPH", new string[] { "MemId" },
                new string[] { UserID.ToString().Trim() }, "ByDataset");
            /////
            TotalRows = Convert.ToInt32(ds.Tables[0].Rows.Count.ToString());
            /////
            if (TotalRows > 0)
            {
                dt = ds.Tables[0];
                int count = TotalRows;
                string strJson = Dataset2Json(ds, count);
               //string strJson = new JavaScriptSerializer().Serialize(dt);
                context.Response.Write(strJson);
               
                context.Response.End();
            }
        }
        catch (Exception ex)
        {
            DB.WriteLog(this.ToString() + " Error Msg :" + ex.Message + "\n" + "Event Info :" + ex.StackTrace);
            //Msg = objgdb.ErrorMsg("Records not available !");
        }
        finally
        {
            if (ds != null) { ds.Dispose(); }
        }

        return TotalRows;
    }
    //public static string DataTable2Json(DataTable dt)
    //{
    //    StringBuilder jsonBuilder = new StringBuilder();

    //    for (int i = 0; i < dt.Rows.Count; i++)
    //    {

    //        jsonBuilder.Append("{");
    //        jsonBuilder.Append("\"label");
    //        jsonBuilder.Append("\":\"");
    //        jsonBuilder.Append(dt.Rows[i][2].ToString());
    //        jsonBuilder.Append("\",");
    //        jsonBuilder.Append("\"Deposit");
    //        jsonBuilder.Append("\":\"");
    //        jsonBuilder.Append(dt.Rows[i][3].ToString());
    //        jsonBuilder.Append("\",");
    //        jsonBuilder.Append("\"Growth");
    //        jsonBuilder.Append("\":\"");
    //        jsonBuilder.Append(dt.Rows[i][4].ToString());
    //        jsonBuilder.Append("\"},");
    //        //for (int j = 0; j < dt.Columns.Count; j++)
    //        //{

    //        //    jsonBuilder.Append(",\"value");
    //        //    jsonBuilder.Append("\":\"");
    //        //    jsonBuilder.Append(dt.Rows[i][j].ToString());
    //        //    jsonBuilder.Append("\"},");
    //        //}
    //        //if (dt.Columns.Count > 0)
    //        //{
    //        //    jsonBuilder.Remove(jsonBuilder.Length - 1, 1);
    //        //}

    //    }
    //    if (dt.Rows.Count > 0)
    //    {
    //        jsonBuilder.Remove(jsonBuilder.Length - 1, 1);
    //    }

    //    return jsonBuilder.ToString();
    //}
    //public static string DataTable2Json1(DataTable dt)
    //{
    //    StringBuilder jsonBuilder1 = new StringBuilder();

    //    for (int i = 0; i < dt.Rows.Count; i++)
    //    {
    //        jsonBuilder1.Append("{");
    //        jsonBuilder1.Append("\"value");
    //        jsonBuilder1.Append("\":\"");
    //        jsonBuilder1.Append(dt.Rows[i][3].ToString());
    //        jsonBuilder1.Append("\"},");
    //    }
    //    if (dt.Rows.Count > 0)
    //    {
    //        jsonBuilder1.Remove(jsonBuilder1.Length - 1, 1);
    //    }

    //    return jsonBuilder1.ToString();
    //}
    //public static string DataTable2Json2(DataTable dt)
    //{
    //    StringBuilder jsonBuilder2 = new StringBuilder();
    //    for (int i = 0; i < dt.Rows.Count; i++)
    //    {
    //        jsonBuilder2.Append("{");
    //        jsonBuilder2.Append("\"value");
    //        jsonBuilder2.Append("\":\"");
    //        jsonBuilder2.Append(dt.Rows[i][4].ToString());
    //        jsonBuilder2.Append("\"},");
    //    }
    //    if (dt.Rows.Count > 0)
    //    {
    //        jsonBuilder2.Remove(jsonBuilder2.Length - 1, 1);
    //    }
    //    return jsonBuilder2.ToString();
    //}
    //public static string Dataset2Json(DataSet ds, int total)
    //{
    //    StringBuilder json = new StringBuilder();

    //    foreach (DataTable dt in ds.Tables)
    //    {
    //        json.Append("[");
    //        json.Append(DataTable2Json(dt));
    //        json.Append("]");
    //    }
    //    return json.ToString();
    //}
    public static string DataTable2Json(DataTable dt)
    {
        StringBuilder jsonBuilder = new StringBuilder();

        for (int i = 0; i < dt.Rows.Count; i++)
        {

            jsonBuilder.Append("'" + dt.Rows[i][2].ToString() + "'");
            jsonBuilder.Append(", ");



            //jsonBuilder.Append("{");
            //for (int j = 0; j < dt.Columns.Count; j++)
            //{
            //    jsonBuilder.Append("\"");
            //    jsonBuilder.Append(dt.Columns[j].ColumnName);
            //    jsonBuilder.Append("\":\"");
            //    jsonBuilder.Append(dt.Rows[i][j].ToString());
            //    jsonBuilder.Append("\",");
            //}
            //if (dt.Columns.Count > 0)
            //{
            //    jsonBuilder.Remove(jsonBuilder.Length - 1, 1);
            //}
            //jsonBuilder.Append("},");
            
            
            
            
            
            
            
            //for (int j = 0; j < dt.Columns.Count; j++)
            //{

            //    jsonBuilder.Append(",\"value");
            //    jsonBuilder.Append("\":\"");
            //    jsonBuilder.Append(dt.Rows[i][j].ToString());
            //    jsonBuilder.Append("\"},");
            //}
            //if (dt.Columns.Count > 0)
            //{
            //    jsonBuilder.Remove(jsonBuilder.Length - 1, 1);
            //}

        }
        if (dt.Rows.Count > 0)
        {
            jsonBuilder.Remove(jsonBuilder.Length - 2, 2);
        }

        return jsonBuilder.ToString();
    }
    public static string DataTable2Json1(DataTable dt)
    {
        StringBuilder jsonBuilder1 = new StringBuilder();

        for (int i = 0; i < dt.Rows.Count; i++)
        {
            jsonBuilder1.Append(dt.Rows[i][3].ToString());
            jsonBuilder1.Append(", ");
        }
        if (dt.Rows.Count > 0)
        {
            jsonBuilder1.Remove(jsonBuilder1.Length - 2, 2);
        }

        return jsonBuilder1.ToString();
    }
    public static string DataTable2Json2(DataTable dt)
    {
        StringBuilder jsonBuilder2 = new StringBuilder();
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            jsonBuilder2.Append(dt.Rows[i][4].ToString());
            jsonBuilder2.Append(", ");
        }
        if (dt.Rows.Count > 0)
        {
            jsonBuilder2.Remove(jsonBuilder2.Length - 2, 2);
        }
        return jsonBuilder2.ToString();
    }
    public static string Dataset2Json(DataSet ds, int total)
    {
        StringBuilder json = new StringBuilder();

        foreach (DataTable dt in ds.Tables)
        {

            
            //json.Append("[");
            json.Append(DataTable2Json(dt));
            //json.Append("],");
            json.Append("|");
            json.Append(DataTable2Json1(dt));
            //json.Append("],");
            json.Append("|");
            json.Append(DataTable2Json2(dt));
            json.Append("|");
            
            

            //json.Append("{\n");
            //json.Append("labels: [");
            //json.Append(DataTable2Json(dt));
            //json.Append("],\n");
            //json.Append("series: [\n");
            //json.Append("[");
            //json.Append(DataTable2Json1(dt));
            //json.Append("],\n");
            //json.Append("[");
            //json.Append(DataTable2Json2(dt));
            //json.Append("]\n");
            //json.Append("]\n");
            //json.Append("}");



            //json.Append("[");
            //json.Append(DataTable2Json(dt));
            //json.Append("]");
            
           
        }
        return json.ToString();
    }
    public bool IsReusable
    {
        get
        {
            return false;
        }
    }

}