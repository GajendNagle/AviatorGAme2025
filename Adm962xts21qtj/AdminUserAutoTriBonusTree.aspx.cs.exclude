using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
public partial class Adm962xts21qtj_AdminUserAutoTriBonusTree : System.Web.UI.Page
{
    SqlConnection cn;
    DataTable dt; SqlDataAdapter sda; SqlCommand cmd;
    DataSet ds;
    string SearchText;
    float TotalAmt = 0;
    string SqlFillStatus;   
    public string FrmDt, ToDt, strSearchText, strPagesize, currentPage, ColumnName;
    public int PageNo;
    public int Pagesize = Convert.ToInt16(ConfigurationManager.AppSettings["gridPageSize"]);
    protected void Page_Load(object sender, EventArgs e)
    {

        if (Request.Cookies["Get563lnr43lbt"] != null)
        {
            if (!IsPostBack)
            {
                ddlJumpToPage.Items.Clear();
                int TotalRows = this.BindResult(1);
                this.populateList(TotalRows);
            }
        }
        else
        {
            Response.Redirect("../login.html");
        }
    }
    private int BindResult(int currentPage)
    {



        int TotalRows = 0;
        try
        {
            if (txtSearch.Text == "")
            {

                if (DDLFillItems.Items.Count != 0)
                {
                    if (DDLDownPos.SelectedItem.Text == "Slab Status")
                    {
                        if (DDLFillItems.SelectedItem.Text == "Pending")
                        {
                            SearchText = "0";
                        }
                        else
                        {
                            SearchText = "1";
                        }
                    }
                    else
                    {
                        SearchText = DDLFillItems.SelectedItem.Text;
                    }
                }
                else
                {
                    SearchText = "";
                }
            }
            else
            {
                SearchText = txtSearch.Text.Trim();
            }



            FrmDt = txtFromDate.Text.Trim();
            ToDt = txtToDate.Text.Trim();
           // strSearchText = SearchText.Replace("PENDING", "0");
            strPagesize = Pagesize.ToString();
            currentPage = currentPage;
            ColumnName = DDLDownPos.SelectedItem.Value;

            cn = new SqlConnection(new DB().getconnection());
            dt = new DataTable();
            sda = new SqlDataAdapter();
            cmd = new SqlCommand("dbo.Pro_AdminUserAutoTriBonusTree");
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@intTotalRecords", SqlDbType.Int).Direction = ParameterDirection.Output;
            cmd.Parameters.AddWithValue("@strSearchText", SearchText);
            cmd.Parameters.AddWithValue("@intPageSize", Pagesize);
            cmd.Parameters.AddWithValue("@intCurrentPage", currentPage);
            cmd.Parameters.AddWithValue("@SrchByDjGt", "All");
            cmd.Parameters.AddWithValue("@FrmDt", txtFromDate.Text.Trim());
            cmd.Parameters.AddWithValue("@ToDt", txtToDate.Text.Trim());
            cmd.Parameters.Add("@ColumnName", SqlDbType.VarChar).Value = DDLDownPos.SelectedItem.Value;
            cmd.Connection = cn;
            sda.SelectCommand = cmd;
            sda.Fill(dt);
            TotalRows = (int)cmd.Parameters["@intTotalRecords"].Value;
            if (TotalRows != 0)
            {
                grdUserDtl.Visible = true;
                lblgvrecord.Visible = false;
                grdUserDtl.PageIndex = currentPage - 1;
                grdUserDtl.DataSource = dt;
                grdUserDtl.DataBind();
                lblgvrecord.Text = "";
            }
            else
            {
                lblgvrecord.Visible = true;
                lblgvrecord.Text = new DB().EmptyMessage(dt.Rows[0]["MSG"].ToString());
                grdUserDtl.Visible = false;
            }
        }
        catch (Exception ex)
        {
            DB.WriteLog(this.ToString() + " Error Msg :" + ex.Message + "\n" + "Event Info :" + ex.StackTrace); lblMsg.Text = "Your request could not be completed.";
        }
        finally
        {
            sda.Dispose();
            cmd.Dispose();
            dt.Dispose();
            cn.Close();
            cn.Dispose();
        }
        return TotalRows;
    }
    private void populateList(int TotalRows)
    {
        lblTotRec.Text = Convert.ToString(TotalRows);
        PageNo = Convert.ToInt32(Math.Floor(Convert.ToDouble((TotalRows / Pagesize))) + 1); ;
        for (int i = 1; i <= PageNo; i++)
        {
            ddlJumpToPage.Items.Add(new ListItem(i.ToString(), i.ToString()));
        }
        CountingShow();
    }
    public void CountingShow()
    {
        if (ddlJumpToPage.SelectedItem.Text == "1")
        {
            PageNo = 1;
            //Pagesize
        }
        else
        {
            PageNo = 1 + int.Parse(ddlJumpToPage.SelectedItem.Text);
            Pagesize = (Pagesize * int.Parse(ddlJumpToPage.SelectedItem.Text));
        }
    }
    protected void btnSearch_Click(object sender, EventArgs e)
    {
        try
        {
            ddlJumpToPage.Items.Clear();
            int TotalRows = this.BindResult(1);
            this.populateList(TotalRows);
        }
        catch (Exception ex)
        {
            DB.WriteLog(this.ToString() + " Error Msg :" + ex.Message + "\n" + "Event Info :" + ex.StackTrace); lblMsg.Text = "Your request could not be completed.";
        }
    }
    protected void PageChanged(object sender, EventArgs e)
    {
        int Page = Convert.ToInt32(ddlJumpToPage.SelectedItem.Value);
        this.BindResult(PageNo);
        CountingShow();
    }
    protected void DDLDownPos_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtSearch.Visible = false;
           
            if (DDLDownPos.SelectedItem.Text == "Slab")
            {
                DDLFillItems.Visible = true;
                txtSearch.Visible = false;
                SqlFillStatus = "select DISTINCT Slab from AutoTriBonusTree with(Nolock)";

                ds = new DataSet();
                DDLFillItems.Items.Clear();

                foreach (DataRow dr in new DB().SelectRows(ds, SqlFillStatus).Tables[0].Rows)
                {
                    DDLFillItems.Items.Add(dr[0].ToString());
                }

            }
            else if (DDLDownPos.SelectedItem.Text == "Slab Status")
            {
                DDLFillItems.Visible = true;
                txtSearch.Visible = false;
                SqlFillStatus = "SELECT  SlabSts=(CASE WHEN SlabSts = '0' THEN 'Pending' else 'Achieved' END ) from AutoTriBonusTree WITH(NOLOCK)";

                ds = new DataSet();
                DDLFillItems.Items.Clear();

                foreach (DataRow dr in new DB().SelectRows(ds, SqlFillStatus).Tables[0].Rows)
                {
                    DDLFillItems.Items.Add(dr[0].ToString());
                }

            }
            else if (DDLDownPos.SelectedItem.Text == "Member ID")
            {
                txtSearch.Visible = true;
                DDLFillItems.Visible = false;
            }
            else if (DDLDownPos.SelectedItem.Text == "Name")
            {
                txtSearch.Visible = true;
                DDLFillItems.Visible = false;
            }
            else 
            {
                txtSearch.TextMode = TextBoxMode.SingleLine;
                DDLFillItems.Visible = false;
                txtSearch.Visible = false;
            }
        
    }
    protected void grdUserDtl_RowDataBound(object sender, GridViewRowEventArgs e)
    {
       
    }

    protected void btnexporttoexport_Click(object sender, EventArgs e)
    {
        if (grdUserDtl.Visible == true)
        {
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", string.Format("attachment; filename={0}", "Report.xls"));
            Response.ContentType = "application/ms-excel";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            grdUserDtl.AllowPaging = false;

            ddlJumpToPage.Items.Clear();
            int TotalRows = this.BindResult(1);
            this.populateList(TotalRows);

            //Change the Header Row back to white color
            grdUserDtl.HeaderRow.Style.Add("background-color", "#FFFFFF");
            //Applying stlye to gridview header cells
            for (int i = 0; i < grdUserDtl.HeaderRow.Cells.Count; i++)
            {
                grdUserDtl.HeaderRow.Cells[i].Style.Add("background-color", "#df5015");
            }
            grdUserDtl.RenderControl(htw);
            Response.Write(sw.ToString());
            Response.End();
        }
        else { }
    }

    public override void VerifyRenderingInServerForm(Control control)
    {
        /* Verifies that the control is rendered */
    }
}
